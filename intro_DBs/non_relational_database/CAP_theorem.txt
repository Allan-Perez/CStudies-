

The majority of NoSQL systems are based on dividing the transaction in various nodes. Here we are not looking for 
an expensive hardware that has a lot of cores a lot of memory (scaling up), but INSTEAD we are looking for small computers 
or input systems and dividing the problem in various nodes (scaling out). 

This view is much more efficient with the costs. Even though the cost is in velocity, these kind of achitectures are really 
good at working with other types of files ( like images or videos )
	
CAP principles for these kind of achitecture (NoSQL):
	
	- Consistency: I must be able to do a query to any node, and get valid data. So here we must be able to access any data
					of any node from each node. This must be true even though the data is fragmented in various nodes.

					Summary: Every query receives the most recent write or an error.
	
	- Availability: When I make a query, it doesn't matter if nodes are Up-Time (working ) or Down-Time (not working).
					This is based on the principle that one data must be replicated at least in 3 nodes. This, in principle
					solves the problem of disponibility.

					Summary: Every request receives a (non-error) response â€“ without guarantee that it contains the most 
							 recent write.
	
	- Partition: This is somewhat related to the Availablity principle, meaning that one data must be partitioned at least 
					3 times between nodes. This solves the problem of having tolerance to the partition. The communication
					failures are a day-to-day routine, so we must be able to tolerate these failures. The difference with 
					the Availability principle is that here we are looking for partitionate the data between nodes, doing 
					not the same thing, but different things parallelly that yields results complementarily.

					Summary: The system continues to operate despite an arbitrary number of messages being dropped (or 
							 delayed) by the network between nodes.


What happens if we ignore the "A" of CAP:
	- Use other strategies: 
		- Biphasic Commit --> 2 checks. (like whatsapp).
								We send the package, and wait for the answer that it has been recevied.
								We have Partition and Consistency.
								Here we work with queues of messages or queues of wait.

What happens if we ignore the "C" of CAP:
	- This is very frequent in version systems (like git). This means that each node 
		have different versions of the same data (a, a', a''). 
		At the time of "updating" the data of all the nodes, we have to make a MERGE to 
		solve the CONSISTENCY issue in that system. This can be done asynchronously, like when
		we have DBs that are distributed in different geographies. In these cases (making merge) 
		not always all the data is consistent.

Wheat happend if we ignore the P of CAP:
	-  Is a system that can only build up in itself (scale up), and won't have nodes that allows it to work parallelly.
