These steps are useful for the implementation of the logical 

Case example for defining the 9 steps with barkers':
AIRPORTS

STEP 1: Identify entities that will solve our problem.
	Research a lot about the problem we are going to solve.
	Recommendation: stick to singular names' law when talking about entities. Automobiles (X) Automobile (V)

	Example:
		- Plane
		- Airline
		- Route
		- Crew member
		- Pilot (this is because pilots may need some regulation or certification that other crew member may not need.)
		- Airport (location,  landing tracks, nation/international)
		- Country
		- City
		- Passanger (has to do with the plane)

STEP 2: Identify relationships between entites. 
		It's useful to use matrices to stablish these relationships:

					plane 	Airline 	route 	crew 	pilot 	airport 	country 	city	passg
				------------------------------------------------------------------------------------
				|
		Plane	|	  x  	   1-1 		   X 	 X		  1-M	  1-M		 X			 X	  	  X
		Airline	|	 1-M	    x 		  1-M 	1-M 	  1-M 	  1-M 		 X			 X		 1-M
		Route	|	   X	   1-M		   X 	  X 		x 	  1-M  		 X 			 X		 1-M
		Crew	|	   X 	   1-1 		   X	  X 	    x 	   x		 X			 X		  X
		Pilot	|	 1-M 	   1-1		   X 	  x		    x      x 		 X			 X		  x
		Airport	|	 1-M	   1-M 		  1-M 	  x 		x 	 	x 		 X			1-1		  x
		Country |	 X			X			X	  X			X	   X		 X 			1-1 	  X
		city 	|	 X 			X			X	  X			X	  1-1		1-1			 x 		  X			
		Passang.|	  x 	   1-M 		  1-M 	  x 	    x 	   X	     X			 X		  x

				

STEP 3: Conceptual Entities - Relationships 
	The map is in ./Airport_DB_ERDiagram.jpg
	At checking, you have to have into account the __transitivity__ principle, so that 
	you have to avoid the redundant relationships. As an example, you don't have 
	to relate plane to route if the plane is related to an airline and the airline to 
	the route. That's kind of redundant relationship. 
		A -> B -> C (then automatically A -> C)

	We have to be very careful with the trasitivity, and don't fall into redundancy. 
	If we do so, we will do a really inefficient and poor DB. 


STEP 4: Assign attributes to the entities.
	Stuff we are gonna work: attribute, type, null/notnull, Primary Key (PK) 
	* Remmember that every table must have a primary key (at least 1). 
	* must be unique.
	* Suggestion: describe the object with a 2-3 character at the initial 
	* of every attribute, so that it's easier to look for, hence faster
	Plane:
		- attribute: 	PLN_ID 			PLN_code 			PLN_name				PLN_manufacturer 			PLN_model
		- type: 		serial			varchar(8)			varcahr(15)				varchar(10)					Varchar(15)
		- Null/notnull: notnull			notnull				nullable				notnull 					notnull 	
		- PK:   			Y 			Y 			 		N 						N 							N

	Airline:
		- Attribute:  ALN_ID 	ALN_Name 	ALN_Chief
		-      type:  serial 	varchar(10) varchar(10)
		-  required:  Y 		Y 			Y
		- 		 PK:  Y 		Y 			N

	Route: 
		- Attribute:  RTE_ID 	RTE_Name	 RTE_Origin 	RTE_Destiny 	RTE_DistanceKM 	RTE_FrequencyMonth
		-      type:  serial 	varchar(10)  varchar(10) 	varchar(10)		number(5,2) 	number(3)
		-  required:  Y 		Y 			 Y 				Y 				Y 				Y 
		- 		 PK:  Y 		Y 			 N 				N 				N 				N 

	Crew: 
		- Attribute:  CRW_ID 	CRW_Name	CRW_LastName 	CRW_BirthD 		CRW_Sex			CRW_BrtPlace	CRW_ContractNum 	CRW_NationalID
		-      type:  serial	varchar 	varchar 		timestamp 		Char 			varchar(8) 		varchar(10)			varchar(10)
		-  required:  Y 		Y 			Y 				Y 				Y 				N 				Y 					Y
		- 		 PK:  Y 		Y 			N 				N 				N 				N 				N 					N

	Pilot:
		- Attribute:  PLT_ID	PLT_Name 	PLT_LastName	PLT_BirthD		PLT_Sex			PLT_License		PLT_BrtPlace	PLT_ContractNum
		-      type:  serial 	Varchar 	varchar 		timestamp 		char			varchar(20) 	varchar(8)		varchar(10)
		-  required:  Y 		Y 			Y 				Y 				Y 				Y 				N 				Y
		- 		 PK:  Y 		Y 			N 				N 				N 				N 				N 				N

	Airport:
		- Attribute:  ARP_ID 	ARP_Name	
		-      type:  serial 	varcahr(8)
		-  required:  Y 		Y
		- 		 PK:  Y 		Y

	Country:
		- Attribute:  CTR_ID	CTR_Name
		-      type:  serial 	varchar(8)
		-  required:  Y 		Y
		- 		 PK:  Y 		Y

	City:
		- Attribute:  CTY_ID 	CTY_Name
		-      type:  serial 	varchar(8)
		-  required:  Y 		Y
		- 		 PK:  Y 		Y

	Passanger:
		- Attribute:  PSG_ID 	PSG_Name 	PSG_LastName 	PSG_BirthD 		PSG_Nation 		PSG_NationalID	PSG_Contact
		-      type:  serial 	varchar 	varchar 		timestamp	 	varchar   		Varchar 		varchar(12)
		-  required:  Y 		Y 			Y 				Y 				Y 				Y 				Y
		- 		 PK:  Y 		Y 			N 				N 				N 				N 				N


STEP 5: Generate conceptual map model
	This is basically the ER diagram but with attributes 

STEP 6: Generate logic model
	The procedure is simple. Just change the Many to Many relationships (M-M) with an intermediary, doing
	each entity to have a one to many (1-M) relationship. The intermediary is called a weak entity, and will
	inherit the key of each strong entity (the initial entities) and will generate new attributes.
	Here, the 1-M relationships also changes, generating new attributes.
	The 1-1 or 0-1 relationships stays the same

	https://stackoverflow.com/questions/7339143/why-no-many-to-many-relationships


STEP 7: Identify new attributes that our weak entities generate
	This is linked to the step 6. We have to find the new attributes that our weak entities have generated.
	These attributes will be the data that will be generated entirely exclusive to the relationship. As an 
	example, take a YT video and its users. Many users can see many videos. User is an entity, and has 
	its attributes, like age and subscriptions,... and the YT video also, like reproductions, likes, etc.
	So in the relationship, the new attributes will be like how many times has the user seen the video, 
	where did he paused, what did he/she commented,...



STEP 8: Build the physical model map.
	Here we have to take into account that the foregin keys generated at the creation of the weak entity, will
	be required each to link to its father key, its father entity.
	The >- relationships (1-M) have been represented as >-. Now they change in the physical model, now they are
	arrows that starts at the weak entity and ends with (the arrow appoints to) the father/strong entity.
	Where the arrow appoints to will indicate which is the PK (primary key) and which is the FK (foregin key)


STEP 9: convert our physical map to a standard database (like MySQL).
	We will find this SQL in ./airport_sql.sql
