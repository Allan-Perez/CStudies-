
4 principles for the design of relationships (ACID):
	

	- Atomicity: One transaction won't be divisible into smaller sub-transactions.
				Meaning, if my transaction is composed of N steps, the N steps have 
				to be completed to say that there's a transaction. If not, there's 
				no transaction.

				Example: 

				If I have to do a transaction of D dollars, from an account A to an account B, then
				I have to follow these steps: 
				
				1. Verify that the account A has at least D dollars
				2. Verify that the account B actually exists and is able to receive the cash
				3. Subtract D dollars from the account A in concept of transaction's concept.
				4. Deposit D dollars into the account B in concept of transaction's concept.

				In this example, the transaction process is INDIVISIBLE. This means that if 
				any of these steps (or even substeps that each step may have) is missing, then
				there's no transaction.

				What happens if for any technical/hardware reason, the process is stopped at the step 2 or 3?
				ROLLBACK. Everything that has been happenning will be pulled back, and everything will be 
				set back to the initial state.

				When all the steps are done, the process will do a "commit", telling the database that 
				the transaction has been done. 

	- Consistency: There has to be a "symmetry", meaning that the input has to be "consistent" with the rules.
					For example, if the process is a transaction, it cannot be that the input is a number, and the 
					output is a character.
					Another example, if I want to withdraw 50 bucks from the bank, and my account has 20 bucks, the 
					rules of the database says that the value of the account can't be smaller than 0, so the bank's 
					database rejects the transaction to be consistent with the rules.
					SUMMARY: OK ---> OK

	- Isolation: One operation cannot affect others. If you buy a specifc chair in the cinema, then other people 
				cannot buy it again, because they cannot sit on you. This assures that the transactions 
				on the same information are done independently.
				How to manage this?
				Playin with the time when each customer arrives. How many DBMS deals with this is that it isolates a
				transaction until the commit is done. 

				More specifically, this property defines when and how the changes produced by a  transaction will be visible to other 
				concurrent transaction
	
	- Durability/Persistency: This property assuers that a completed operation will remain on the DB forever, and it won't be undone 
							eventhough the system fails, so the data has to survive.
